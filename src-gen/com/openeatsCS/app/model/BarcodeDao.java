package com.openeatsCS.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.openeatsCS.app.model.Barcode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BARCODE.
*/
public class BarcodeDao extends AbstractDao<Barcode, Long> {

    public static final String TABLENAME = "BARCODE";

    /**
     * Properties of entity Barcode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Loc_photo1 = new Property(3, String.class, "loc_photo1", false, "LOC_PHOTO1");
        public final static Property Loc_photo2 = new Property(4, String.class, "loc_photo2", false, "LOC_PHOTO2");
        public final static Property Loc_photo3 = new Property(5, String.class, "loc_photo3", false, "LOC_PHOTO3");
        public final static Property Upload = new Property(6, Boolean.class, "upload", false, "UPLOAD");
        public final static Property Finish = new Property(7, Boolean.class, "finish", false, "FINISH");
        public final static Property Update = new Property(8, Boolean.class, "update", false, "UPDATE");
    };

    private DaoSession daoSession;


    public BarcodeDao(DaoConfig config) {
        super(config);
    }
    
    public BarcodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BARCODE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BARCODE' TEXT UNIQUE ," + // 1: barcode
                "'NAME' TEXT," + // 2: name
                "'LOC_PHOTO1' TEXT," + // 3: loc_photo1
                "'LOC_PHOTO2' TEXT," + // 4: loc_photo2
                "'LOC_PHOTO3' TEXT," + // 5: loc_photo3
                "'UPLOAD' INTEGER," + // 6: upload
                "'FINISH' INTEGER," + // 7: finish
                "'UPDATE' INTEGER);"); // 8: update
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BARCODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Barcode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String loc_photo1 = entity.getLoc_photo1();
        if (loc_photo1 != null) {
            stmt.bindString(4, loc_photo1);
        }
 
        String loc_photo2 = entity.getLoc_photo2();
        if (loc_photo2 != null) {
            stmt.bindString(5, loc_photo2);
        }
 
        String loc_photo3 = entity.getLoc_photo3();
        if (loc_photo3 != null) {
            stmt.bindString(6, loc_photo3);
        }
 
        Boolean upload = entity.getUpload();
        if (upload != null) {
            stmt.bindLong(7, upload ? 1l: 0l);
        }
 
        Boolean finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(8, finish ? 1l: 0l);
        }
 
        Boolean update = entity.getUpdate();
        if (update != null) {
            stmt.bindLong(9, update ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Barcode entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Barcode readEntity(Cursor cursor, int offset) {
        Barcode entity = new Barcode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loc_photo1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // loc_photo2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // loc_photo3
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // upload
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // finish
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // update
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Barcode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoc_photo1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLoc_photo2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoc_photo3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFinish(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setUpdate(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Barcode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Barcode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
