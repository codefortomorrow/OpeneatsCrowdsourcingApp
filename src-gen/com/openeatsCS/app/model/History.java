package com.openeatsCS.app.model;

import com.openeatsCS.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HISTORY.
 */
public class History {

    private Long id;
    private java.util.Date time;
    private String log;
    private long barcode_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HistoryDao myDao;

    private Barcode barcode;
    private Long barcode__resolvedKey;


    public History() {
    }

    public History(Long id) {
        this.id = id;
    }

    public History(Long id, java.util.Date time, String log, long barcode_id) {
        this.id = id;
        this.time = time;
        this.log = log;
        this.barcode_id = barcode_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getTime() {
        return time;
    }

    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public String getLog() {
        return log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    public long getBarcode_id() {
        return barcode_id;
    }

    public void setBarcode_id(long barcode_id) {
        this.barcode_id = barcode_id;
    }

    /** To-one relationship, resolved on first access. */
    public Barcode getBarcode() {
        long __key = this.barcode_id;
        if (barcode__resolvedKey == null || !barcode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BarcodeDao targetDao = daoSession.getBarcodeDao();
            Barcode barcodeNew = targetDao.load(__key);
            synchronized (this) {
                barcode = barcodeNew;
            	barcode__resolvedKey = __key;
            }
        }
        return barcode;
    }

    public void setBarcode(Barcode barcode) {
        if (barcode == null) {
            throw new DaoException("To-one property 'barcode_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.barcode = barcode;
            barcode_id = barcode.getId();
            barcode__resolvedKey = barcode_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
