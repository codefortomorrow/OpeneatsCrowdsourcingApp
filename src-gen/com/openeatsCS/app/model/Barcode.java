package com.openeatsCS.app.model;

import java.util.List;
import com.openeatsCS.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BARCODE.
 */
public class Barcode {

    private Long id;
    private String barcode;
    private String name;
    private String loc_photo1;
    private String loc_photo2;
    private String loc_photo3;
    private Boolean upload;
    private Boolean finish;
    private Boolean update;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BarcodeDao myDao;

    private List<History> historyList;

    public Barcode() {
    }

    public Barcode(Long id) {
        this.id = id;
    }

    public Barcode(Long id, String barcode, String name, String loc_photo1, String loc_photo2, String loc_photo3, Boolean upload, Boolean finish, Boolean update) {
        this.id = id;
        this.barcode = barcode;
        this.name = name;
        this.loc_photo1 = loc_photo1;
        this.loc_photo2 = loc_photo2;
        this.loc_photo3 = loc_photo3;
        this.upload = upload;
        this.finish = finish;
        this.update = update;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBarcodeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLoc_photo1() {
        return loc_photo1;
    }

    public void setLoc_photo1(String loc_photo1) {
        this.loc_photo1 = loc_photo1;
    }

    public String getLoc_photo2() {
        return loc_photo2;
    }

    public void setLoc_photo2(String loc_photo2) {
        this.loc_photo2 = loc_photo2;
    }

    public String getLoc_photo3() {
        return loc_photo3;
    }

    public void setLoc_photo3(String loc_photo3) {
        this.loc_photo3 = loc_photo3;
    }

    public Boolean getUpload() {
        return upload;
    }

    public void setUpload(Boolean upload) {
        this.upload = upload;
    }

    public Boolean getFinish() {
        return finish;
    }

    public void setFinish(Boolean finish) {
        this.finish = finish;
    }

    public Boolean getUpdate() {
        return update;
    }

    public void setUpdate(Boolean update) {
        this.update = update;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<History> getHistoryList() {
        if (historyList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoryDao targetDao = daoSession.getHistoryDao();
            List<History> historyListNew = targetDao._queryBarcode_HistoryList(id);
            synchronized (this) {
                if(historyList == null) {
                    historyList = historyListNew;
                }
            }
        }
        return historyList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHistoryList() {
        historyList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
